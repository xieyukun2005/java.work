import java.util.Scanner;

public class Slice_o_Heaven {
    
    private String[] pizzasOrdered = new String[10];
    private String[] pizzaSizesOrdered = new String[10];
    private String[] sideDishesOrdered = new String[20];
    private String[] drinksOrdered = new String[20];
    private int pizzaIndex = 0;
    private int sizeIndex = 0;
    private int sideIndex = 0;
    private int drinkIndex = 0;
    private double totalOrderPrice = 0;

    public String storeAddress;
    private String storemenu;
    public String storeHours;
    public long storePhoneNumber;
    public String storeEmail;
    public String storeWebsite;
    public String pizaaname;
    public String sides;
    public String pizzaIngredients;
    private String orderID;
    private String orderDetails;
    private String orderStatus;
    private double orderTotal;
    public String drinks;
    public String sideDish;
    public int pizzasize;

    private static final String DEF_ORDER_ID = "DEF-SOH-099";
    private static final String DEF_PIZZA_INGREDIENTS = "Mozzarella Cheese";
    private static final double DEF_ORDER_TOTAL = 15.00;
    private static final long BLACKLISTED_NUMBER = 12345678901234L;
    private static final double PIZZA_BASE_PRICE = 10.0;

    public Slice_o_Heaven() {
        this.orderID = DEF_ORDER_ID;
        this.pizzaIngredients = DEF_PIZZA_INGREDIENTS;
        this.orderTotal = DEF_ORDER_TOTAL;
        this.sides = "";
        this.drinks = "";
    }

    public Slice_o_Heaven(String orderID, String pizzaIngredients, double orderTotal) {
        this.orderID = orderID;
        this.pizzaIngredients = pizzaIngredients;
        this.orderTotal = orderTotal;
    }

    public String getOrderID() {
        return orderID;
    }

    public void setOrderID(String orderID) {
        this.orderID = orderID;
    }

    public double getOrderTotal() {
        return orderTotal;
    }

    public void setOrderTotal(double orderTotal) {
        this.orderTotal = orderTotal;
    }

    public void takeOrder() {
        Scanner scanner = new Scanner(System.in);
        boolean continueOrdering = true;

        while (continueOrdering) {
          
            System.out.println("Welcome to Slice-o-Heaven Pizzeria. Here’s what we serve:");
            PizzaSelection[] pizzaSelections = PizzaSelection.values();
            for (int i = 0; i < pizzaSelections.length; i++) {
                System.out.println((i + 1) + ". " + pizzaSelections[i]);
            }
            System.out.println((pizzaSelections.length + 1) + ". Custom Pizza with a maximum of 10 toppings that you choose");

            
            int pizzaChoice;
            do {
                System.out.print("Please enter your choice (1 - " + (pizzaSelections.length + 1) + "): ");
                while (!scanner.hasNextInt()) {
                    System.out.println("Invalid input. Please enter a number.");
                    scanner.next();
                }
                pizzaChoice = scanner.nextInt();
            } while (pizzaChoice < 1 || pizzaChoice > pizzaSelections.length + 1);

            if (pizzaChoice <= pizzaSelections.length) {
                
                PizzaSelection selectedPizza = pizzaSelections[pizzaChoice - 1];
                pizzasOrdered[pizzaIndex++] = selectedPizza.toString();
                totalOrderPrice += selectedPizza.getPrice();
            } else {
              
                System.out.println("Available toppings:");
                PizzaToppings[] pizzaToppings = PizzaToppings.values();
                for (int i = 0; i < pizzaToppings.length; i++) {
                    System.out.println((i + 1) + ". " + pizzaToppings[i]);
                }

                StringBuilder customPizzaToppings = new StringBuilder();
                double customPizzaPrice = PIZZA_BASE_PRICE;
                for (int i = 0; i < 10; i++) {
                    System.out.print("Enter topping choice (1 - " + pizzaToppings.length + ") or 0 to finish: ");
                    int toppingChoice = scanner.nextInt();
                    if (toppingChoice == 0) {
                        break;
                    } else if (toppingChoice < 1 || toppingChoice > pizzaToppings.length) {
                        System.out.println("Invalid choice. Please try again.");
                        i--;
                        continue;
                    }
                    PizzaToppings selectedTopping = pizzaToppings[toppingChoice - 1];
                    customPizzaToppings.append(selectedTopping.getTopping()).append(", ");
                    customPizzaPrice += selectedTopping.getToppingPrice();
                }
                if (customPizzaToppings.length() > 0) {
                    customPizzaToppings.setLength(customPizzaToppings.length() - 2); // 去掉最后的逗号和空格
                }
                String customPizzaDescription = "Custom Pizza with " + customPizzaToppings + ", for €" + customPizzaPrice;
                pizzasOrdered[pizzaIndex++] = customPizzaDescription;
                totalOrderPrice += customPizzaPrice;
            }

            
            PizzaSize[] pizzaSizes = PizzaSize.values();
            System.out.println("Choose a pizza size:");
            for (int i = 0; i < pizzaSizes.length; i++) {
                System.out.println((i + 1) + ". " + pizzaSizes[i]);
            }
            int sizeChoice;
            do {
                System.out.print("Enter your choice (1 - " + pizzaSizes.length + "): ");
                while (!scanner.hasNextInt()) {
                    System.out.println("Invalid input. Please enter a number.");
                    scanner.next();
                }
                sizeChoice = scanner.nextInt();
            } while (sizeChoice < 1 || sizeChoice > pizzaSizes.length);
            PizzaSize selectedSize = pizzaSizes[sizeChoice - 1];
            pizzaSizesOrdered[sizeIndex++] = selectedSize.toString();
            totalOrderPrice += selectedSize.getAddToPizzaPrice();

            
            SideDish[] sideDishes = SideDish.values();
            System.out.println("Choose a side dish:");
            for (int i = 0; i < sideDishes.length; i++) {
                System.out.println((i + 1) + ". " + sideDishes[i]);
            }
            int sideChoice;
            do {
                System.out.print("Enter your choice (1 - " + sideDishes.length + "): ");
                while (!scanner.hasNextInt()) {
                    System.out.println("Invalid input. Please enter a number.");
                    scanner.next();
                }
                sideChoice = scanner.nextInt();
            } while (sideChoice < 1 || sideChoice > sideDishes.length);
            SideDish selectedSide = sideDishes[sideChoice - 1];
            sideDishesOrdered[sideIndex++] = selectedSide.toString();
            totalOrderPrice += selectedSide.getAddToPizzaPrice();

            
            Drinks[] drinksList = Drinks.values();
            System.out.println("Choose a drink:");
            for (int i = 0; i < drinksList.length; i++) {
                System.out.println((i + 1) + ". " + drinksList[i]);
            }
            int drinkChoice;
            do {
                System.out.print("Enter your choice (1 - " + drinksList.length + "): ");
                while (!scanner.hasNextInt()) {
                    System.out.println("Invalid input. Please enter a number.");
                    scanner.next();
                }
                drinkChoice = scanner.nextInt();
            } while (drinkChoice < 1 || drinkChoice > drinksList.length);
            Drinks selectedDrink = drinksList[drinkChoice - 1];
            drinksOrdered[drinkIndex++] = selectedDrink.toString();
            totalOrderPrice += selectedDrink.getAddToPizzaPrice();

           
            System.out.print("Do you want to order more? (Y/N): ");
            String continueChoice = scanner.next();
            continueOrdering = continueChoice.equalsIgnoreCase("Y");
        }

        scanner.close();
    }

    public void isItYourBirthday() {
        Scanner scanner = new Scanner(System.in);
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        Calendar now = Calendar.getInstance();
        String birthdateStr;

        do {
            System.out.println("Enter your birthday (dd/MM/yyyy):");
            birthdateStr = scanner.next();
            try {
                Date birthdate = sdf.parse(birthdateStr);
                Calendar cal = Calendar.getInstance();
                cal.setTime(birthdate);
                int birthYear = cal.get(Calendar.YEAR);
                int currentYear = now.get(Calendar.YEAR);
                int ageDiff = currentYear - birthYear;

                if (ageDiff >= 5 && ageDiff <= 120) {
                    int birthMonth = cal.get(Calendar.MONTH);
                    int birthDay = cal.get(Calendar.DAY_OF_MONTH);

                    int currentMonth = now.get(Calendar.MONTH);
                    int currentDay = now.get(Calendar.DAY_OF_MONTH);

                    int age = currentYear - birthYear;
                    if (currentMonth < birthMonth || (currentMonth == birthMonth && currentDay < birthDay)) {
                        age--;
                    }

                    if (age < 18 && currentMonth == birthMonth && currentDay == birthDay) {
                        System.out.println("Congratulations! You pay only half the price for your order");
                        orderTotal /= 2;
                    } else {
                        System.out.println("Too bad! You do not meet the conditions to get our 50% discount");
                    }
                    makeCardPayment();
                    break;
                } else {
                    System.out.println("Invalid date. You are either too young or too dead to order. Please enter a valid date:");
                }
            } catch (ParseException e) {
                System.out.println("Invalid date format. Please try again.");
            }
        } while (true);

        scanner.close();
    }

    public void makeCardPayment() {
        Scanner scanner = new Scanner(System.in);
        String expiryDate;
        SimpleDateFormat expiryFormat = new SimpleDateFormat("MM/yyyy");

        do {
            System.out.println("Enter the card’s expiry date (MM/yyyy):");
            expiryDate = scanner.next();
            try {
                Date expiry = expiryFormat.parse(expiryDate);
                if (expiry.before(new Date())) {
                    System.out.println("Invalid date. Expiry date must be in the future.");
                } else {
                    break;
                }
            } catch (ParseException e) {
                System.out.println("Invalid date format. Please try again.");
            }
        } while (true);

        System.out.println("Enter your card number:");
        long cardNumber = scanner.nextLong();
        System.out.println("Enter the card’s cvv number:");
        int cvv = scanner.nextInt();

        processCardPayment(cardNumber, expiryDate, cvv);
        scanner.close();
    }

    public void processCardPayment(long cardNumber, String expiryDate, int cvv) {
        Scanner scanner = new Scanner(System.in);
        long cardNum;

        do {
            System.out.println("Enter a 14-digit card number:");
            cardNum = scanner.nextLong();
            String cardStr = Long.toString(cardNum);

            if (cardStr.length() == 14 && cardNum!= BLACKLISTED_NUMBER) {
                int cardLength = cardStr.length();
                System.out.println("Card accepted");

                int firstCardDigit = Integer.parseInt(cardStr.substring(0, 1));

                if (cardNum == BLACKLISTED_NUMBER) {
                    System.out.println("Card is blacklisted. Please use another card");
                    return;
                }

                int lastFourDigits = Integer.parseInt(cardStr.substring(cardLength - 4));

                StringBuilder cardNumberToDisplay = new StringBuilder(cardStr);
                for (int i = 1; i < cardLength - 4; i++) {
                    cardNumberToDisplay.setCharAt(i, '*');
                }
                System.out.println("Card number to display: " + cardNumberToDisplay);

                makepizza(orderID, orderDetails, orderTotal);
                break;
            } else {
                System.out.println("Invalid card number. Must be 14 digits and not blacklisted.");
            }
        } while (true);

        scanner.close();
    }

    public void makepizza(String id, String details, double total) {
        this.orderID = id;
        this.orderDetails = details;
        this.orderTotal = total;
        try {
            Thread.sleep(5000);
        } catch (InterruptedException e) {
            System.out.println("Order is ready for pickup!");
        }
        System.out.println("Your pizza is ok!");
    }

    @Override
    public String toString() {
        StringBuilder receipt = new StringBuilder("********RECEIPT********\n");
        for (int i = 0; i < pizzaIndex; i++) {
            receipt.append((i + 1)).append(". ").append(pizzasOrdered[i]).append("\n");
            receipt.append("   ").append(pizzaSizesOrdered[i]).append("\n");
            receipt.append("   ").append(sideDishesOrdered[i]).append("\n");
            receipt.append("   ").append(drinksOrdered[i]).append("\n");
        }
        receipt.append("ORDER TOTAL: €").append(totalOrderPrice);
        return receipt.toString();
    }

    public void specialOfTheDay(String pizzaOfTheDay, String sideOfTheDay, String specialPrice) {
        System.out.println("Special of the day:");
        System.out.println("Pizza: " + pizzaOfTheDay);
        System.out.println("Side: " + sideOfTheDay);
        System.out.println("Price: " + specialPrice);
    }

    // 定义 PizzaSelection 枚举
    public enum PizzaSelection {
        PEPPERONI("Pepperoni", "Lots of pepperoni and extra cheese", 18),
        HAWAIIAN("Hawaiian", "Pineapple, ham, and extra cheese", 22),
        VEGGIE("Veggie", "Green pepper, onion, tomatoes, mushroom, and black olives", 25),
        BBQ_CHICKEN("BBQ Chicken", "Chicken in BBQ sauce, bacon, onion, green pepper, and cheddar cheese", 35),
        EXTRAVAGANZA("Extravaganza", "Pepperoni, ham, Italian sausage, beef, onions, green pepper, mushrooms, black olives, and extra cheese", 45);

        private final String pizzaName;
        private final String pizzaToppings;
        private final int price;

        PizzaSelection(String pizzaName, String pizzaToppings, int price) {
            this.pizzaName = pizzaName;
            this.pizzaToppings = pizzaToppings;
            this.price = price;
        }

        public String getPizzaName() {
            return pizzaName;
        }

        public String getPizzaToppings() {
            return pizzaToppings;
        }

        public int getPrice() {
            return price;
        }

        @Override
        public String toString() {
            return pizzaName + " Pizza with " + pizzaToppings + ", for €" + price;
        }
    }

    
    public enum PizzaToppings {
        HAM("Ham", 2),
        PEPPERONI("Pepperoni", 2),
        BEEF("Beef", 2),
        CHICKEN("Chicken", 2),
        SAUSAGE("Sausage", 2),
        PINEAPPLE("Pineapple", 1),
        ONION("Onion", 0.5),
        TOMATOES("Tomatoes", 0.4),
        GREEN_PEPPER("Green Pepper", 0.5),
        BLACK_OLIVES("Black Olives", 0.5),
        SPINACH("Spinach", 0.5),
        CHEDDAR_CHEESE("Cheddar Cheese", 0.8),
        MOZZARELLA_CHEESE("Mozzarella Cheese", 0.8),
        FETA_CHEESE("Feta Cheese", 1),
        PARMESAN_CHEESE("Parmesan Cheese", 1);

        private final String topping;
        private final double toppingPrice;

        PizzaToppings(String topping, double toppingPrice) {
            this.topping = topping;
            this.toppingPrice = toppingPrice;
        }

        public String getTopping() {
            return topping;
        }

        public double getToppingPrice() {
            return toppingPrice;
        }

        @Override
        public String toString() {
            return topping + " (€" + toppingPrice + ")";
        }
    }

    
    public enum PizzaSize {
        LARGE("Large", 10),
        MEDIUM("Medium", 5),
        SMALL("Small",